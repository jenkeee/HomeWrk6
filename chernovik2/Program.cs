using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
Делегаты
Делегат представляет собой объект, который может ссылаться на метод. Следовательно, когда создается делегат, в итоге получается объект, содержащий ссылку на метод. Метод можно вызывать по этой ссылке. Иными словами, делегат позволяет вызывать метод, на который он ссылается.
По сути, делегат — это безопасный в отношении типов объект, указывающий на другой метод (или, возможно, список методов) приложения, который может быть вызван позднее. 
В частности — объект делегата поддерживает три важных фрагмента информации:
●	адрес метода, на котором он вызывается;
●	аргументы(если есть) этого метода;
●	возвращаемое значение(если есть) этого метода.
Как только делегат создан и снабжен необходимой информацией, он может во время выполнения динамически вызывать методы, на которые указывает.
Пример.Создадим метод, который будет выводить значения некоторых функций от a до b. Чтобы иметь возможность применять метод с различными функциями, используем механизм делегатов.
*/
namespace metha6
{
    // Описываем делегат. В делегате описывается сигнатура методов, на
    // которые он сможет ссылаться в дальнейшем (хранить в себе)
    public delegate double Fun(double x, double y);

    class Program
    {
        // Создаем метод, который принимает делегат
        // На практике этот метод сможет принимать любой метод
        // с такой же сигнатурой, как у делегата
        public static void Table(Fun F, double x, double b)
        {
            Console.WriteLine("----- X ----- Y -----");
            while (x <= b)
            {
                Console.WriteLine("| {0,8:0.000} | {1,8:0.000} |", x, F);
                x += 1;
            }
            Console.WriteLine("---------------------");
        }
        // Создаем метод для передачи его в качестве параметра в Table
        public static double MyFunc(double x, double y)
        {
            return x * x * x;
        }

        static void Main()
        {
            // Создаем новый делегат и передаем ссылку на него в метод Table
            Console.WriteLine("Таблица функции MyFunc:");
            // Параметры метода и тип возвращаемого значения, должны совпадать с делегатом
            Table(new Fun(MyFunc), -2, 2);
            Console.WriteLine("Еще раз та же таблица, но вызов организован по новому");
            // Упрощение(c C# 2.0).Делегат создается автоматически.            
            Table(MyFunc, -2, 2);
            Console.WriteLine("Таблица функции Sin:");
            Table(MyFunc, -2, 2);      // Можно передавать уже созданные методы
            Console.WriteLine("Таблица функции x^2:");
            // Упрощение(с C# 2.0). Использование анонимного метода
            Table(delegate (double x, double y) { return x * x; }, 0, 3);
            Console.ReadKey();
        }
    }
}

